<div class="row">
    <div class="col-12">

        <div class="container-fluid p-2">
            <div class="card-header bg-soft-success text-dark text-center row align-items-center" style="padding: 10px 15px; height: 60px;">
                <div class="col-12 col-md-2 text-md-start text-center mb-2 mb-md-0">
                    <a class="btn btn-dark btn-sm w-100" asp-controller="Mission" asp-action="Board"
                       style="max-width: 60px; padding: 4px 8px; line-height: 1;">
                        <i class="uil uil-clapper-board"></i><br />Board
                    </a>
                </div>
                <div class="col-12 col-md-8 text-center fs-4 text-dark">
                    <i class="dripicons-pencil"></i> Görevler
                </div>
                <div class="col-12 col-md-2 text-md-end text-center">
                    <button id="btnAdd" class="btn btn-success w-100" style="max-width: 110px; font-size: 14px;">
                        <i class="uil uil-plus me-2"></i>Yeni Kayıt
                    </button>
                </div>
            </div>
        </div>




        <div class="card-body">
            <table id="tblMission" class="table table-bordered table-striped table-hover"></table>
        </div>
    </div>
</div>
</div>

<div class="modal fade" id="modalAdd" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false" role="dialog" aria-labelledby="modalTitleId" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="formMission">
                    <div class="mb-3">
                        <label for="txtTitle" class="form-label">Başlık</label>
                        <input type="text" class="form-control" id="txtTitle" placeholder="Lütfen Görev Başlığı Ekleyiniz">
                    </div>
                    <div class="mb-3">
                        <label for="txtDescription" class="form-label">Açıklama</label>
                        <textarea class="form-control" id="txtDescription" placeholder="Lütfen Görev Açıklaması Ekleyiniz"></textarea>
                    </div>
                    @* <div class="mb-3">
                    <label for="ddlFiles" class="form-label">Files</label>
                    <select class="form-select" id="ddlFiles" ></select>
                    </div> *@

                    <div class="mb-3">
                        <label for="ddlPriorities" class="form-label">Öncelik</label>
                        <select class="form-select" id="ddlPriorities"></select>
                    </div>
                    <div class="mb-3">
                        <label for="ddlStatuses" class="form-label">Durum</label>
                        <select class="form-select" id="ddlStatuses"></select>
                    </div>
                    <div class="mb-3">
                        <label for="ddlProjects" class="form-label">Görevin Ait Olduğu Proje</label>
                        <select class="form-select" id="ddlProjects"></select>
                    </div>
                    <div class="mb-3">
                        <label for="ddlUsers" class="form-label">Kullanıcılar</label>
                        <select class="form-select" id="ddlUsers" multiple></select>
                    </div>
                    <div class="mb-3">
                        <label for="txtEndDate" class="form-label">Görevin Bitmesi Gereken Tarihi</label>
                        <input type="date" class="form-control" id="txtEndDate">
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="chkSmsNotification">
                        <label class="form-check-label" for="chkSmsNotification">Görev Sahiplerine SMS Gönderilsin mi?</label>
                    </div>
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="chkMailNotification">
                        <label class="form-check-label" for="chkMailNotification">Görev Sahiplerine Mail Gönderilsin mi?</label>
                    </div>

                </form>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    Kapat
                </button>
                <button type="button" id="btnSave" class="btn btn-primary">Kaydet</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="modalDetail" tabindex="-1" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-lg-8 left-panel">
                        <p><i class="bi bi-link"></i> İlişkili: <a href="/project/index" id="project"></a></p>

                        <div class="mt-3">
                           
                            <div id="timer-container">
                                <div id="elapsed-time" class="elapsed-time-display">00:00:00</div>
                            </div>
                            <div id="timer-controls" margin-top: 10px;">
                            </div>
                        </div>
                       
                        <div class="mt-3">
                            <h6>
                                <i class="uil-info-circle"></i> Açıklama
                                <i class="uil-comment-alt-edit ms-2" title="Düzenle" id="edit-description"></i>
                            </h6>
                            <div id="description-container">
                                <p id="description"></p>
                            </div>
                            <div id="edit-description-container" style="display: none;">
                                <textarea class="form-control" id="edit-description-text" placeholder="Açıklamayı buraya yazın..."></textarea>
                                <button type="button" id="save-description" class="btn btn-primary btn-sm">Kaydet</button>
                                <button type="button" id="close-description" class="btn btn-danger btn-sm">Kapat</button>
                            </div>
                        </div>
                        <div class="mt-3">
                            <h6><i class="bx bx-chat"></i> Yorumlar</h6>
                            <p id="comments"></p>
                            <textarea class="form-control" id="newComment" placeholder="Yorum Yazınız" required></textarea>
                            <div class="card border border-primary">
                            </div>
                            <div class="text-end">
                                <button class="btn btn-primary btn-sm " id="btnAddComment">Yorum Ekle</button>
                            </div>

                        </div>
                    </div>
                    <div class="col-lg-4 right-panel">
                        <div class="border-start ps-3">
                            <h6><i class="bi bi-info-square"></i> Görev Bilgisi</h6>
                            <p id="created-date">
                                Oluşturuldu:
                            </p>
                            <p class="uil-clipboard-notes" id="statuss"> Durum: </p>
                            <p id="completed-status" data-is-completed="false">Görev Bitti mi?:</p>
                            <p class="uil-calendar-alt" id="start-date"> Başlangıç Tarihi: </p>
                            <p class="uil-calendar-slash" id="end-date">
                                Bitiş Tarihi:
                            </p>
                            <p class="mdi mdi-priority-high" id="priority">Öncelik: </p>
                            <p class="mdi mdi-timer-outline" id="total-time">
                                Girilen Toplam Süre:
                            </p>

                            <p id="emailNotification">
                                <i class="uil-fast-mail"></i> E-posta Bildirimi: <span id="emailNotificationIcon"></span>
                            </p>
                            <p id="smsNotification">
                                <i class="uil-calling"></i> SMS Bildirimi: <span id="smsNotificationIcon"></span>
                            </p>

                            <h6>
                                <i class="uil-users-alt"></i> Atanan Üyeler
                            </h6>
                            <p id="assigned-users"></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        var DataTable = "";
        $(document).ready(() => {
            DataTable = $("#tblMission").DataTable({
                ajax: '/Mission/GetAll',
                dataSrc: '',
                columns: [
                    { data: 'id', title: 'ID' },
                    { data: 'title', title: 'Başlık' },
                    { data: 'description', title: 'Açıklama' },
                    { data: 'project.name', title: 'Bulunduğu Proje' },
                    { data: 'status.name', title: 'Durum' },
                    { data: 'priority.name', title: 'Öncelik' },
                    {
                        data: 'assignees', title: 'Görev Sahibi', render: (data) => {
                            let assignees = "";
                            for (var item of data) {
                                assignees += item.email + "<br/>"
                            }
                            return assignees;
                        }
                    },
                    {
                        data: 'id',
                        title: 'İşlemler',
                        orderable: false,
                        render: (data) => {

                            return `
                                                    <button onclick="showMissionDetails(${data},this)" class="btn uil-eye fs-6 btn-info" ></button > `;
                        }
                    }
                ],
            });
        });

        let timerInterval;
        let elapsedSeconds = 0;

        showMissionDetails = function (missionId, button) {
            $("#edit-description").off("click");
            $("#save-description").off("click");
            $("#close-description").off("click");

            $.ajax({
                url: `/Mission/GetById/${missionId}`,
                type: 'POST',
                data: { id: missionId },
                success: function (res) {

                    const isActive = res.isActive;
                    updateTimerControls(isActive);
                    $("#timer-container").html(`<div id="elapsed-time-${missionId}" class="elapsed-time-display">00:00:00</div>`);
                    console.log(res.totalDuration);
                    $("#modalDetail").modal("show");
                    $("#taskModalLabel").text(res.title);
                    $("#statuss").text(`Durum: ${res.statusName}`);
                    $("#description").text(res.description);
                    $("#project").text(`#${res.projectId} - ${res.projectName}`);
                    $("#created-date").text(`Oluşturuldu: ${formatDate(res.dateCreated)}`);
                    $("#end-date").text(`Bitmesi Gereken Tarih: ${formatDate(res.endDate)}`);
                    $("#start-date").text(res.startDate ? `Başlangıç Tarihi: ${formatDate(res.startDate)}` : 'Başlangıç Tarihi: Başlamadı');
                    $("#priority").text(`Öncelik: ${res.priorityName}`);
                    $("#total-time").text(`Girilen Toplam Süre: ${res.totalDuration}`);

                     let isCompletedText = res.isCompleted ? "Görev henüz tamamlanmadı." : "Görev tamamlandı.";
                     let completedClass = res.isCompleted ? "text-danger" : "text-success";

                   
                    $("#completed-status").html(`<span class="${completedClass}">${isCompletedText}</span>`);
                    $("#completed-status").data('is-completed', res.isCompleted); 
                    let assigneesText = "";
                    if (res.assigneeEmails && res.assigneeEmails.length > 0) {
                        for (var email of res.assigneeEmails) {
                            assigneesText += email + "<br/>";
                        }
                    } else {
                        assigneesText = "Atanan üye yok";
                    }
                    $("#assigned-users").html(assigneesText); 
                    $("#emailNotificationIcon").html(res.emailNotification ? '<i class="uil-check text-success"></i>' : '<i class="uil-times text-danger"></i>');
                    $("#smsNotificationIcon").html(res.smsNotification ? '<i class="uil-check text-success"></i>' : '<i class="uil-times text-danger"></i>');
                    let commentsText = "";
                    if (res.comments && res.comments.length > 0) {
                        for (var comment of res.comments) {
                            commentsText += `
                                                    <div class="mt-4">
                                                       <div>
                                                          <p class="float-sm-end text-muted font-size-13">${formatCommentDate(comment.dateCreated)}</p>
                                                       </div>
                                                    <div class="border p-4 rounded">
                                                      <div class="border-bottom pb-3">
                                                        <p class="text-muted mb-4 font-size-15 comment-description">${comment.description}</p>
                                                        <div class="d-flex align-items-start">
                                                          <div class="flex-grow-1 d-flex justify-content-between">
                                                            <h5 class="font-size-13 mb-0">${comment.user.email}</h5>
                                                            <div class="text-end">
                                                              <button onclick="addCommentParent(${comment.id}, this)" class="btn btn-sm">Yanıtla</button>
                                                            </div>
                                                          </div>
                                                        </div>
                                                       </div>
                                                      </div>
                                                      </div>
                                                      <style>
                                                            .comment-description {
                                                      word-break: break-word;
                                                      overflow-wrap: break-word;
                                                      white-space: pre-wrap;
                                                      }
                                                      </style>
                                            `;
                        }
                    } else {
                        commentsText = "<p>Henüz yorum yapılmamış.</p>";
                    }
                    $("#comments").html(commentsText);
                    $("#modalDetail").data('missionId', missionId);
                },
                error: function (err) {
                    console.error("Görev detayları yüklenirken hata oluştu:", err);
                }
            });
            $("#edit-description").click(function () {
                $("#description-container").hide();
                $("#edit-description-container").show();
                $("#edit-description-text").val($("#description").text().trim());
            });

            $("#save-description").click(function () {
                const updatedDescription = $("#edit-description-text").val().trim();
                if (updatedDescription === "") {
                    toastr.error('Açıklama boş olamaz. Lütfen bir açıklama girin.');
                    return;// İşlem yapılmadan çıkış yap
                }
                $.ajax({
                    url: `/Mission/UpdateDescription/${missionId}`,
                    type: 'POST',
                    data: { missionId: missionId, description: updatedDescription },
                    success: function (res) {
                        if (res.success) {
                            $("#description").text(updatedDescription);
                            $("#edit-description-container").hide();
                            $("#description-container").show();
                            toastr.success('Açıklama başarıyla güncellendi.');

                        } else {
                            toastr.error('Açıklama güncellenirken hata oluştu: ' + res.message);
                        }
                    },
                    error: function (err) {
                        toastr.error('Açıklama güncellenirken bir hata oluştu.', err);
                    }
                });
            });

            $("#close-description").click(function () {
                $("#edit-description-container").hide();
                $("#description-container").show();
            });



            function updateTimerControls(isActive) {
                const timerControls = $('#timer-controls');
                timerControls.empty();

                if (isActive) {
                    timerControls.append(`
                            <button class="btn btn-primary btn-sm" id="start-timer">
                                <i class="bi bi-play-circle"></i> Süre Başlat
                            </button>
                            <button class="btn btn-danger btn-sm" id="complete-task">
                                <i class="bi bi-check-circle"></i> Görevi Bitir
                            </button>
                        `);
                } else {
                    timerControls.append(`
                            <button class="btn btn-warning btn-sm" id="stop-timer">
                                <i class="bi bi-pause-circle"></i> Durdur
                            </button>
                            <button class="btn btn-danger btn-sm" id="complete-task">
                                <i class="bi bi-check-circle"></i> Görevi Bitir
                            </button>
                        `);
                }
            }

            $(document).off('click', '#start-timer').on('click', '#start-timer', function () {
                const missionId = $("#modalDetail").data('missionId');
                console.log("Timer başlatılıyor ve missionId:", missionId);
                const isCompleted = $("#completed-status").data('is-completed');
                console.log(isCompleted);
                 if (isCompleted==false) {
                   toastr.info('Bu görev zaten tamamlandı! Tamamlanan bir görev tekrar başlanamaz.', 'Bilgi');
                  return; 
                  }
                $.ajax({
                    url: `/Mission/StartMission/${missionId}`,
                    type: 'POST',
                    data: { missionId: missionId },
                    success: function (res) {
                        console.log(res);
                        startTimer(missionId);
                        updateTimerControls(res.isActive);

                        toastr.success("Süre başarıyla başlatıldı.");


                    },
                    error: () => {
                        toastr.error('Süre başlatılırken hata oluştu.');
                    }
                });
            });

            let timers = {};

            function startTimer(missionId) {
                if (timers[missionId]) {
                    clearInterval(timers[missionId]); 
                }

                let elapsedTime = 0;
                timers[missionId] = setInterval(function () {
                    elapsedTime += 1000;

                    const hours = Math.floor(elapsedTime / 1000 / 3600);
                    const minutes = Math.floor((elapsedTime / 1000 / 60) % 60);
                    const seconds = Math.floor((elapsedTime / 1000) % 60);

                    const formattedHours = String(hours).padStart(2, '0');
                    const formattedMinutes = String(minutes).padStart(2, '0');
                    const formattedSeconds = String(seconds).padStart(2, '0');

                    
                    $(`#elapsed-time-${missionId}`).text(`${formattedHours}:${formattedMinutes}:${formattedSeconds}`);
                }, 1000);
            }


            $(document).off('click', '#stop-timer').on('click', '#stop-timer', function () {
                const missionId = $("#modalDetail").data('missionId');
                $.ajax({
                    url: `/Mission/StopMission/${missionId}`,
                    type: 'POST',
                    data: { missionId: missionId },
                    success: (res) => {
                        console.log(res);
                        updateTimerControls(res);
                     
                        console.log(`Durdurulan Timer ID: ${missionId}`);
                        clearInterval(timers[missionId]);
                        delete timers[missionId];
                        if (!timers[missionId]) {
                            console.log(`Timer başarıyla durduruldu: ${missionId}`);
                        } else {
                            console.error(`Timer durdurulamadı: ${missionId}`);
                        }
                        toastr.success('Süre başarıyla durduruldu.');
                    },
                    error: () => {
                        toastr.error('Süre durdurulurken hata oluştu.');
                    }
                });
            });

            $(document).off('click', '#complete-task').on('click', '#complete-task', function () {
             const missionId = $("#modalDetail").data('missionId');
             const isCompleted = $("#completed-status").data('is-completed');
              console.log(isCompleted);
                 if (isCompleted==false) {
                   toastr.info('Bu görev zaten tamamlandı! Tamamlanan bir göreve tekrar bitirilemez.', 'Bilgi');
                  return; 
                  }

   
              Swal.fire({
                 title: 'Emin misiniz?',
                 text: "Bitirilen göreve devam edilemez. Görevi bitirmek istediğinize emin misiniz?",
                 icon: 'warning',
                 showCancelButton: true,
                 confirmButtonColor: '#3085d6',
                 cancelButtonColor: '#d33',
                 confirmButtonText: 'Evet, bitir!',
                 cancelButtonText: 'İptal'
                      }).then((result) => {
                          if (result.isConfirmed) {
                     $.ajax({
                         url: `/Mission/CompleteMission/${missionId}`,
                         type: 'POST',
                         data: { missionId: missionId },
                         success: (res) => {
                           clearInterval(timers[missionId]);
                           delete timers[missionId];
                           updateTimerControls(res);
                           toastr.success('Görev başarıyla tamamlandı.');
                           },
                         error: () => {
                              toastr.error('Görev tamamlanırken hata oluştu.');
                         }
            });
        }
    });
});


            function startTimerFromStartDate(missionId, startTime) {
                const currentTime = new Date();
                let elapsedTime = currentTime - startTime;

                if (timers[missionId]) {
                    clearInterval(timers[missionId]);
                }

                timers[missionId] = setInterval(function () {
                    elapsedTime += 1000;

                    const hours = Math.floor(elapsedTime / 1000 / 3600);
                    const minutes = Math.floor((elapsedTime / 1000 / 60) % 60);
                    const seconds = Math.floor((elapsedTime / 1000) % 60);

                    $('#timer-display').text(`${hours} saat, ${minutes} dakika, ${seconds} saniye`);
                }, 1000);
            }


        };

        //tarih
        function formatDate(dateString) {
            if (!dateString) return "";
            let date = new Date(dateString);
            return date.toLocaleString('tr-TR', {
                day: '2-digit',
                month: '2-digit',
                year: 'numeric',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
        }

        $("#btnAddComment").off().click(function () {
            let missionId = $("#modalDetail").data('missionId');
            let comment = {
                description: $("#newComment").val(),
                taskId: missionId,
            }
            if ($("#newComment").val().length > 0) {
                $.ajax({
                    url: '/Comment/Add',
                    type: 'POST',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(comment),
                    success: function (res) {
                        $("#newComment").val("");
                        let commentsText = "";
                        for (var comment of res.comments) {
                            commentsText += `
                                                   <div class="mt-4">
                                                     <div>
                                                        <p class="float-sm-end text-muted font-size-13">${formatCommentDate(comment.dateCreated)}</p>
                                                     </div>
                                                        <div class="border p-4 rounded">
                                                          <div class="border-bottom pb-3">
                                                            <p class="text-muted mb-4 font-size-15 comment-description">${comment.description}</p>
                                                              <div class="d-flex align-items-start">
                                                                <div class="flex-grow-1 d-flex justify-content-between">
                                                                  <h5 class="font-size-13 mb-0">${comment.user.email}</h5>
                                                                  <div class="text-end">
                                                                   <button onclick="addCommentParent(${comment.id}, this)" class="btn btn-sm">Yanıtla</button>
                                                                  </div>
                                                                </div>
                                                              </div>
                                                          </div>
                                                       </div>
                                                    </div>
                                                    <style>
                                                        .comment-description {
                                                    word-break: break-word;
                                                    overflow-wrap: break-word;
                                                    white-space: pre-wrap;
                                                    }
                                                    </style>
                                                    `;
                        }
                        $("#comments").html(commentsText);

                    },
                    error: function (err) {
                        console.error("Yorum eklenirken hata oluştu:", err);
                    }
                });
            } else {
                toastr.error("Lütfen yorum yazınız.")
            }

        });
        $("#btnAdd").click(function () {
            $("#modalAdd").modal("show");
            $("#deletedRow").hide();
            $("#formMission").trigger('reset');
            $("#modalTitle").text("Yeni Görev Ekleme");
            fillUsers();
            // fillFiles();
            fillPriorities();
            fillProjects();
            fillStatuses();

            $("#btnSave").text("Kaydet").off().click(() => {
                let mission = {

                    title: $("#txtTitle").val(),
                    description: $("#txtDescription").val(),
                    // fileId: $("#ddlFiles").val(),
                    priorityId: $("#ddlPriorities").val(),
                    statusId: $("#ddlStatuses").val(),
                    projectId: $("#ddlProjects").val(),
                    endDate: $("#txtEndDate").val(),
                    smsNotification: $("#chkSmsNotification").is(":checked"),
                    emailNotification: $("#chkMailNotification").is(":checked")

                }

                let selectedUserIds = $("#ddlUsers").val();


                $.ajax({
                    url: '/Mission/Add',
                    type: 'POST',
                    data: {
                        mission: mission,
                        userIds: selectedUserIds,
                        emailNotification: mission.emailNotification
                    },
                    success: function (res) {
                        $("#modalAdd").modal("hide");
                        res.project = { name: $("#ddlProjects option:selected").text() };
                        res.status = { name: $("#ddlStatuses option:selected").text() };
                        res.priority = { name: $("#ddlPriorities option:selected").text() };
                        DataTable.row.add(res).draw();
                        if(res.emailNotification){
                            toastr.success("Görev E-Postası Başarıyla İletildi.")
                        }
                        toastr.success("Görev Başarıyla Oluşturuldu");
                        
                    },
                    error: function (res) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata',
                            text: res

                        });
                    }
                });
            });
        });



        function formatCommentDate(dateString) {
            if (!dateString) return "";
            let date = new Date(dateString);
            return date.toLocaleString('tr-TR', {
                day: 'numeric',
                month: 'long',
                hour: '2-digit',
                minute: '2-digit'
            });
        }
        function fillStatuses() {
            $.ajax({
                url: '/Status/GetAll',
                type: 'GET',
                success: (res) => {
                    $("#ddlStatuses").empty();
                    $("#ddlStatuses").append(new Option("Lütfen Görev Durumu Seçiniz", "", true, true));
                    for (var item of res.data) {
                        $("#ddlStatuses").append(new Option(item.name, item.id));
                    }
                    $("#ddlStatuses").select2({
                        dropdownParent: $('#modalAdd'),
                        placeholder: "Lütfen Görev Durumu Seçiniz",
                        allowClear: true,
                        width: "100%"
                    });
                    $("#ddlStatuses").val(null).trigger('change');
                }
            });
        }

        function fillProjects() {
            $.ajax({
                url: '/Project/GetAll',
                type: 'GET',
                success: (res) => {
                    $("#ddlProjects").empty();
                    $("#ddlProjects").append(new Option("Lütfen Eklenecek Projeyi Seçiniz", "", true, true));
                    for (var item of res.data) {
                        $("#ddlProjects").append(new Option(item.name, item.id));
                    }
                    $("#ddlProjects").select2({
                        dropdownParent: $('#modalAdd'),
                        placeholder: "Lütfen Eklenecek Projeyi Seçiniz",
                        allowClear: true,
                        width: "100%"
                    });
                    $("#ddlProjects").val(null).trigger('change');
                }
            });
        }

        function fillUsers() {
            $.ajax({
                url: '/Project/FillUsers',
                type: 'GET',
                success: (res) => {
                    $("#ddlUsers").empty();

                    for (var item of res.data) {
                        $("#ddlUsers").append(new Option(item.email, item.id));
                    }
                    $("#ddlUsers").select2({
                        dropdownParent: $('#modalAdd'),
                        width: "100%",
                        placeholder: "Göreve Dahil olacak Kullanıcıları Seçiniz"

                    });
                }
            });
        }

        function fillFiles() {
            $.ajax({
                url: '/TaskFile/GetAll',
                type: 'GET',
                success: (res) => {
                    $("#ddlFiles").empty();

                    for (var item of res.data) {
                        $("#ddlFiles").append(new Option(item.name, item.id));
                    }

                }
            });
        }

        function fillPriorities() {
            $.ajax({
                url: '/Priority/GetAll',
                type: 'GET',
                success: (res) => {
                    $("#ddlPriorities").empty();
                    $("#ddlPriorities").append(new Option("Lütfen Öncelik Seçiniz", "", true, true));
                    for (var item of res.data) {
                        $("#ddlPriorities").append(new Option(item.name, item.id));
                    }
                    $("#ddlPriorities").select2({
                        dropdownParent: $('#modalAdd'),
                        placeholder: "Lütfen Öncelik Seçiniz",
                        allowClear: true,
                        width: "100%"
                    });
                    $("#ddlPriorities").val(null).trigger('change');
                }
            });
        }

    </script>

}

